"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/graphql-request";
exports.ids = ["vendor-chunks/graphql-request"];
exports.modules = {

/***/ "(rsc)/./node_modules/graphql-request/build/esm/defaultJsonSerializer.js":
/*!*************************************************************************!*\
  !*** ./node_modules/graphql-request/build/esm/defaultJsonSerializer.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultJsonSerializer: () => (/* binding */ defaultJsonSerializer)\n/* harmony export */ });\nconst defaultJsonSerializer = JSON; //# sourceMappingURL=defaultJsonSerializer.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2VzbS9kZWZhdWx0SnNvblNlcmlhbGl6ZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLE1BQU1BLHdCQUF3QkMsS0FBSyxDQUMxQyxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsLXJlcXVlc3QvYnVpbGQvZXNtL2RlZmF1bHRKc29uU2VyaWFsaXplci5qcz82NjAzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBkZWZhdWx0SnNvblNlcmlhbGl6ZXIgPSBKU09OO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdEpzb25TZXJpYWxpemVyLmpzLm1hcCJdLCJuYW1lcyI6WyJkZWZhdWx0SnNvblNlcmlhbGl6ZXIiLCJKU09OIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graphql-request/build/esm/defaultJsonSerializer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graphql-request/build/esm/graphql-ws.js":
/*!**************************************************************!*\
  !*** ./node_modules/graphql-request/build/esm/graphql-ws.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GraphQLWebSocketClient: () => (/* binding */ GraphQLWebSocketClient)\n/* harmony export */ });\n/* harmony import */ var _resolveRequestDocument_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./resolveRequestDocument.js */ \"(rsc)/./node_modules/graphql-request/build/esm/resolveRequestDocument.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/graphql-request/build/esm/types.js\");\n/* eslint-disable */ \n\n// import type WebSocket from 'ws'\nconst CONNECTION_INIT = `connection_init`;\nconst CONNECTION_ACK = `connection_ack`;\nconst PING = `ping`;\nconst PONG = `pong`;\nconst SUBSCRIBE = `subscribe`;\nconst NEXT = `next`;\nconst ERROR = `error`;\nconst COMPLETE = `complete`;\nclass GraphQLWebSocketMessage {\n    get type() {\n        return this._type;\n    }\n    get id() {\n        return this._id;\n    }\n    get payload() {\n        return this._payload;\n    }\n    constructor(type, payload, id){\n        this._type = type;\n        this._payload = payload;\n        this._id = id;\n    }\n    get text() {\n        const result = {\n            type: this.type\n        };\n        if (this.id != null && this.id != undefined) result.id = this.id;\n        if (this.payload != null && this.payload != undefined) result.payload = this.payload;\n        return JSON.stringify(result);\n    }\n    static parse(data, f) {\n        const { type, payload, id } = JSON.parse(data);\n        return new GraphQLWebSocketMessage(type, f(payload), id);\n    }\n}\nclass GraphQLWebSocketClient {\n    constructor(socket, { onInit, onAcknowledged, onPing, onPong }){\n        this.socketState = {\n            acknowledged: false,\n            lastRequestId: 0,\n            subscriptions: {}\n        };\n        this.socket = socket;\n        socket.addEventListener(`open`, async (e)=>{\n            this.socketState.acknowledged = false;\n            this.socketState.subscriptions = {};\n            socket.send(ConnectionInit(onInit ? await onInit() : null).text);\n        });\n        socket.addEventListener(`close`, (e)=>{\n            this.socketState.acknowledged = false;\n            this.socketState.subscriptions = {};\n        });\n        socket.addEventListener(`error`, (e)=>{\n            console.error(e);\n        });\n        socket.addEventListener(`message`, (e)=>{\n            try {\n                const message = parseMessage(e.data);\n                switch(message.type){\n                    case CONNECTION_ACK:\n                        {\n                            if (this.socketState.acknowledged) {\n                                console.warn(`Duplicate CONNECTION_ACK message ignored`);\n                            } else {\n                                this.socketState.acknowledged = true;\n                                if (onAcknowledged) onAcknowledged(message.payload);\n                            }\n                            return;\n                        }\n                    case PING:\n                        {\n                            if (onPing) onPing(message.payload).then((r)=>socket.send(Pong(r).text));\n                            else socket.send(Pong(null).text);\n                            return;\n                        }\n                    case PONG:\n                        {\n                            if (onPong) onPong(message.payload);\n                            return;\n                        }\n                }\n                if (!this.socketState.acknowledged) {\n                    // Web-socket connection not acknowledged\n                    return;\n                }\n                if (message.id === undefined || message.id === null || !this.socketState.subscriptions[message.id]) {\n                    // No subscription identifer or subscription indentifier is not found\n                    return;\n                }\n                const { query, variables, subscriber } = this.socketState.subscriptions[message.id];\n                switch(message.type){\n                    case NEXT:\n                        {\n                            if (!message.payload.errors && message.payload.data) {\n                                subscriber.next && subscriber.next(message.payload.data);\n                            }\n                            if (message.payload.errors) {\n                                subscriber.error && subscriber.error(new _types_js__WEBPACK_IMPORTED_MODULE_1__.ClientError({\n                                    ...message.payload,\n                                    status: 200\n                                }, {\n                                    query,\n                                    variables\n                                }));\n                            } else {}\n                            return;\n                        }\n                    case ERROR:\n                        {\n                            subscriber.error && subscriber.error(new _types_js__WEBPACK_IMPORTED_MODULE_1__.ClientError({\n                                errors: message.payload,\n                                status: 200\n                            }, {\n                                query,\n                                variables\n                            }));\n                            return;\n                        }\n                    case COMPLETE:\n                        {\n                            subscriber.complete && subscriber.complete();\n                            delete this.socketState.subscriptions[message.id];\n                            return;\n                        }\n                }\n            } catch (e) {\n                // Unexpected errors while handling graphql-ws message\n                console.error(e);\n                socket.close(1006);\n            }\n            socket.close(4400, `Unknown graphql-ws message.`);\n        });\n    }\n    makeSubscribe(query, operationName, subscriber, variables) {\n        const subscriptionId = (this.socketState.lastRequestId++).toString();\n        this.socketState.subscriptions[subscriptionId] = {\n            query,\n            variables,\n            subscriber\n        };\n        this.socket.send(Subscribe(subscriptionId, {\n            query,\n            operationName,\n            variables\n        }).text);\n        return ()=>{\n            this.socket.send(Complete(subscriptionId).text);\n            delete this.socketState.subscriptions[subscriptionId];\n        };\n    }\n    rawRequest(query, variables) {\n        return new Promise((resolve, reject)=>{\n            let result;\n            this.rawSubscribe(query, {\n                next: (data, extensions)=>result = {\n                        data,\n                        extensions\n                    },\n                error: reject,\n                complete: ()=>resolve(result)\n            }, variables);\n        });\n    }\n    request(document, variables) {\n        return new Promise((resolve, reject)=>{\n            let result;\n            this.subscribe(document, {\n                next: (data)=>result = data,\n                error: reject,\n                complete: ()=>resolve(result)\n            }, variables);\n        });\n    }\n    subscribe(document, subscriber, variables) {\n        const { query, operationName } = (0,_resolveRequestDocument_js__WEBPACK_IMPORTED_MODULE_0__.resolveRequestDocument)(document);\n        return this.makeSubscribe(query, operationName, subscriber, variables);\n    }\n    rawSubscribe(query, subscriber, variables) {\n        return this.makeSubscribe(query, undefined, subscriber, variables);\n    }\n    ping(payload) {\n        this.socket.send(Ping(payload).text);\n    }\n    close() {\n        this.socket.close(1000);\n    }\n}\nGraphQLWebSocketClient.PROTOCOL = `graphql-transport-ws`;\n\n// Helper functions\nfunction parseMessage(data, f = (a)=>a) {\n    const m = GraphQLWebSocketMessage.parse(data, f);\n    return m;\n}\nfunction ConnectionInit(payload) {\n    return new GraphQLWebSocketMessage(CONNECTION_INIT, payload);\n}\nfunction Ping(payload) {\n    return new GraphQLWebSocketMessage(PING, payload, undefined);\n}\nfunction Pong(payload) {\n    return new GraphQLWebSocketMessage(PONG, payload, undefined);\n}\nfunction Subscribe(id, payload) {\n    return new GraphQLWebSocketMessage(SUBSCRIBE, payload, id);\n}\nfunction Complete(id) {\n    return new GraphQLWebSocketMessage(COMPLETE, undefined, id);\n} //# sourceMappingURL=graphql-ws.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graphql-request/build/esm/graphql-ws.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graphql-request/build/esm/helpers.js":
/*!***********************************************************!*\
  !*** ./node_modules/graphql-request/build/esm/helpers.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HeadersInstanceToPlainObject: () => (/* binding */ HeadersInstanceToPlainObject),\n/* harmony export */   uppercase: () => (/* binding */ uppercase)\n/* harmony export */ });\nconst uppercase = (str)=>str.toUpperCase();\n/**\n * Convert Headers instance into regular object\n */ const HeadersInstanceToPlainObject = (headers)=>{\n    const o = {};\n    headers.forEach((v, k)=>{\n        o[k] = v;\n    });\n    return o;\n}; //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2VzbS9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQU8sTUFBTUEsWUFBWSxDQUFDQyxNQUFRQSxJQUFJQyxXQUFXLEdBQUc7QUFDcEQ7O0NBRUMsR0FDTSxNQUFNQywrQkFBK0IsQ0FBQ0M7SUFDekMsTUFBTUMsSUFBSSxDQUFDO0lBQ1hELFFBQVFFLE9BQU8sQ0FBQyxDQUFDQyxHQUFHQztRQUNoQkgsQ0FBQyxDQUFDRyxFQUFFLEdBQUdEO0lBQ1g7SUFDQSxPQUFPRjtBQUNYLEVBQUUsQ0FDRixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly91aS8uL25vZGVfbW9kdWxlcy9ncmFwaHFsLXJlcXVlc3QvYnVpbGQvZXNtL2hlbHBlcnMuanM/YjcyMyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgdXBwZXJjYXNlID0gKHN0cikgPT4gc3RyLnRvVXBwZXJDYXNlKCk7XG4vKipcbiAqIENvbnZlcnQgSGVhZGVycyBpbnN0YW5jZSBpbnRvIHJlZ3VsYXIgb2JqZWN0XG4gKi9cbmV4cG9ydCBjb25zdCBIZWFkZXJzSW5zdGFuY2VUb1BsYWluT2JqZWN0ID0gKGhlYWRlcnMpID0+IHtcbiAgICBjb25zdCBvID0ge307XG4gICAgaGVhZGVycy5mb3JFYWNoKCh2LCBrKSA9PiB7XG4gICAgICAgIG9ba10gPSB2O1xuICAgIH0pO1xuICAgIHJldHVybiBvO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlcnMuanMubWFwIl0sIm5hbWVzIjpbInVwcGVyY2FzZSIsInN0ciIsInRvVXBwZXJDYXNlIiwiSGVhZGVyc0luc3RhbmNlVG9QbGFpbk9iamVjdCIsImhlYWRlcnMiLCJvIiwiZm9yRWFjaCIsInYiLCJrIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graphql-request/build/esm/helpers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graphql-request/build/esm/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/graphql-request/build/esm/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var cross_fetch__WEBPACK_IMPORTED_MODULE_5___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientError: () => (/* reexport safe */ _types_js__WEBPACK_IMPORTED_MODULE_4__.ClientError),\n/* harmony export */   GraphQLClient: () => (/* binding */ GraphQLClient),\n/* harmony export */   GraphQLWebSocketClient: () => (/* reexport safe */ _graphql_ws_js__WEBPACK_IMPORTED_MODULE_6__.GraphQLWebSocketClient),\n/* harmony export */   batchRequests: () => (/* binding */ batchRequests),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   gql: () => (/* binding */ gql),\n/* harmony export */   rawRequest: () => (/* binding */ rawRequest),\n/* harmony export */   request: () => (/* binding */ request),\n/* harmony export */   resolveRequestDocument: () => (/* reexport safe */ _resolveRequestDocument_js__WEBPACK_IMPORTED_MODULE_3__.resolveRequestDocument)\n/* harmony export */ });\n/* harmony import */ var _defaultJsonSerializer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defaultJsonSerializer.js */ \"(rsc)/./node_modules/graphql-request/build/esm/defaultJsonSerializer.js\");\n/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ \"(rsc)/./node_modules/graphql-request/build/esm/helpers.js\");\n/* harmony import */ var _parseArgs_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./parseArgs.js */ \"(rsc)/./node_modules/graphql-request/build/esm/parseArgs.js\");\n/* harmony import */ var _resolveRequestDocument_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./resolveRequestDocument.js */ \"(rsc)/./node_modules/graphql-request/build/esm/resolveRequestDocument.js\");\n/* harmony import */ var _types_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/graphql-request/build/esm/types.js\");\n/* harmony import */ var cross_fetch__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cross-fetch */ \"(rsc)/./node_modules/cross-fetch/dist/node-ponyfill.js\");\n/* harmony import */ var _graphql_ws_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./graphql-ws.js */ \"(rsc)/./node_modules/graphql-request/build/esm/graphql-ws.js\");\n\n\n\n\n\n\n/**\n * Convert the given headers configuration into a plain object.\n */ const resolveHeaders = (headers)=>{\n    let oHeaders = {};\n    if (headers) {\n        if (typeof Headers !== `undefined` && headers instanceof Headers || /*#__PURE__*/ (cross_fetch__WEBPACK_IMPORTED_MODULE_5___namespace_cache || (cross_fetch__WEBPACK_IMPORTED_MODULE_5___namespace_cache = __webpack_require__.t(cross_fetch__WEBPACK_IMPORTED_MODULE_5__, 2))) && cross_fetch__WEBPACK_IMPORTED_MODULE_5__.Headers && headers instanceof cross_fetch__WEBPACK_IMPORTED_MODULE_5__.Headers) {\n            oHeaders = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.HeadersInstanceToPlainObject)(headers);\n        } else if (Array.isArray(headers)) {\n            headers.forEach(([name, value])=>{\n                if (name && value !== undefined) {\n                    oHeaders[name] = value;\n                }\n            });\n        } else {\n            oHeaders = headers;\n        }\n    }\n    return oHeaders;\n};\n/**\n * Clean a GraphQL document to send it via a GET query\n */ const cleanQuery = (str)=>str.replace(/([\\s,]|#[^\\n\\r]+)+/g, ` `).trim();\n/**\n * Create query string for GraphQL request\n */ const buildRequestConfig = (params)=>{\n    if (!Array.isArray(params.query)) {\n        const params_ = params;\n        const search = [\n            `query=${encodeURIComponent(cleanQuery(params_.query))}`\n        ];\n        if (params.variables) {\n            search.push(`variables=${encodeURIComponent(params_.jsonSerializer.stringify(params_.variables))}`);\n        }\n        if (params_.operationName) {\n            search.push(`operationName=${encodeURIComponent(params_.operationName)}`);\n        }\n        return search.join(`&`);\n    }\n    if (typeof params.variables !== `undefined` && !Array.isArray(params.variables)) {\n        throw new Error(`Cannot create query with given variable type, array expected`);\n    }\n    // Batch support\n    const params_ = params;\n    const payload = params.query.reduce((acc, currentQuery, index)=>{\n        acc.push({\n            query: cleanQuery(currentQuery),\n            variables: params_.variables ? params_.jsonSerializer.stringify(params_.variables[index]) : undefined\n        });\n        return acc;\n    }, []);\n    return `query=${encodeURIComponent(params_.jsonSerializer.stringify(payload))}`;\n};\nconst createHttpMethodFetcher = (method)=>async (params)=>{\n        const { url, query, variables, operationName, fetch, fetchOptions, middleware } = params;\n        const headers = {\n            ...params.headers\n        };\n        let queryParams = ``;\n        let body = undefined;\n        if (method === `POST`) {\n            body = createRequestBody(query, variables, operationName, fetchOptions.jsonSerializer);\n            if (typeof body === `string`) {\n                // @ts-expect-error todo\n                headers[`Content-Type`] = `application/json`;\n            }\n        } else {\n            // @ts-expect-error todo needs ADT for TS to understand the different states\n            queryParams = buildRequestConfig({\n                query,\n                variables,\n                operationName,\n                jsonSerializer: fetchOptions.jsonSerializer ?? _defaultJsonSerializer_js__WEBPACK_IMPORTED_MODULE_0__.defaultJsonSerializer\n            });\n        }\n        const init = {\n            method,\n            headers,\n            body,\n            ...fetchOptions\n        };\n        let urlResolved = url;\n        let initResolved = init;\n        if (middleware) {\n            const result = await Promise.resolve(middleware({\n                ...init,\n                url,\n                operationName,\n                variables\n            }));\n            const { url: urlNew, ...initNew } = result;\n            urlResolved = urlNew;\n            initResolved = initNew;\n        }\n        if (queryParams) {\n            urlResolved = `${urlResolved}?${queryParams}`;\n        }\n        return await fetch(urlResolved, initResolved);\n    };\n/**\n * GraphQL Client.\n */ class GraphQLClient {\n    constructor(url, requestConfig = {}){\n        this.url = url;\n        this.requestConfig = requestConfig;\n        /**\n         * Send a GraphQL query to the server.\n         */ this.rawRequest = async (...args)=>{\n            const [queryOrOptions, variables, requestHeaders] = args;\n            const rawRequestOptions = (0,_parseArgs_js__WEBPACK_IMPORTED_MODULE_2__.parseRawRequestArgs)(queryOrOptions, variables, requestHeaders);\n            const { headers, fetch = cross_fetch__WEBPACK_IMPORTED_MODULE_5__, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;\n            const { url } = this;\n            if (rawRequestOptions.signal !== undefined) {\n                fetchOptions.signal = rawRequestOptions.signal;\n            }\n            const { operationName } = (0,_resolveRequestDocument_js__WEBPACK_IMPORTED_MODULE_3__.resolveRequestDocument)(rawRequestOptions.query);\n            return makeRequest({\n                url,\n                query: rawRequestOptions.query,\n                variables: rawRequestOptions.variables,\n                headers: {\n                    ...resolveHeaders(callOrIdentity(headers)),\n                    ...resolveHeaders(rawRequestOptions.requestHeaders)\n                },\n                operationName,\n                fetch,\n                method,\n                fetchOptions,\n                middleware: requestMiddleware\n            }).then((response)=>{\n                if (responseMiddleware) {\n                    responseMiddleware(response);\n                }\n                return response;\n            }).catch((error)=>{\n                if (responseMiddleware) {\n                    responseMiddleware(error);\n                }\n                throw error;\n            });\n        };\n    }\n    async request(documentOrOptions, ...variablesAndRequestHeaders) {\n        const [variables, requestHeaders] = variablesAndRequestHeaders;\n        const requestOptions = (0,_parseArgs_js__WEBPACK_IMPORTED_MODULE_2__.parseRequestArgs)(documentOrOptions, variables, requestHeaders);\n        const { headers, fetch = cross_fetch__WEBPACK_IMPORTED_MODULE_5__, method = `POST`, requestMiddleware, responseMiddleware, ...fetchOptions } = this.requestConfig;\n        const { url } = this;\n        if (requestOptions.signal !== undefined) {\n            fetchOptions.signal = requestOptions.signal;\n        }\n        const { query, operationName } = (0,_resolveRequestDocument_js__WEBPACK_IMPORTED_MODULE_3__.resolveRequestDocument)(requestOptions.document);\n        return makeRequest({\n            url,\n            query,\n            variables: requestOptions.variables,\n            headers: {\n                ...resolveHeaders(callOrIdentity(headers)),\n                ...resolveHeaders(requestOptions.requestHeaders)\n            },\n            operationName,\n            fetch,\n            method,\n            fetchOptions,\n            middleware: requestMiddleware\n        }).then((response)=>{\n            if (responseMiddleware) {\n                responseMiddleware(response);\n            }\n            return response.data;\n        }).catch((error)=>{\n            if (responseMiddleware) {\n                responseMiddleware(error);\n            }\n            throw error;\n        });\n    }\n    // prettier-ignore\n    batchRequests(documentsOrOptions, requestHeaders) {\n        const batchRequestOptions = (0,_parseArgs_js__WEBPACK_IMPORTED_MODULE_2__.parseBatchRequestArgs)(documentsOrOptions, requestHeaders);\n        const { headers, ...fetchOptions } = this.requestConfig;\n        if (batchRequestOptions.signal !== undefined) {\n            fetchOptions.signal = batchRequestOptions.signal;\n        }\n        const queries = batchRequestOptions.documents.map(({ document })=>(0,_resolveRequestDocument_js__WEBPACK_IMPORTED_MODULE_3__.resolveRequestDocument)(document).query);\n        const variables = batchRequestOptions.documents.map(({ variables })=>variables);\n        return makeRequest({\n            url: this.url,\n            query: queries,\n            // @ts-expect-error TODO reconcile batch variables into system.\n            variables,\n            headers: {\n                ...resolveHeaders(callOrIdentity(headers)),\n                ...resolveHeaders(batchRequestOptions.requestHeaders)\n            },\n            operationName: undefined,\n            fetch: this.requestConfig.fetch ?? cross_fetch__WEBPACK_IMPORTED_MODULE_5__,\n            method: this.requestConfig.method || `POST`,\n            fetchOptions,\n            middleware: this.requestConfig.requestMiddleware\n        }).then((response)=>{\n            if (this.requestConfig.responseMiddleware) {\n                this.requestConfig.responseMiddleware(response);\n            }\n            return response.data;\n        }).catch((error)=>{\n            if (this.requestConfig.responseMiddleware) {\n                this.requestConfig.responseMiddleware(error);\n            }\n            throw error;\n        });\n    }\n    setHeaders(headers) {\n        this.requestConfig.headers = headers;\n        return this;\n    }\n    /**\n     * Attach a header to the client. All subsequent requests will have this header.\n     */ setHeader(key, value) {\n        const { headers } = this.requestConfig;\n        if (headers) {\n            // todo what if headers is in nested array form... ?\n            //@ts-expect-error todo\n            headers[key] = value;\n        } else {\n            this.requestConfig.headers = {\n                [key]: value\n            };\n        }\n        return this;\n    }\n    /**\n     * Change the client endpoint. All subsequent requests will send to this endpoint.\n     */ setEndpoint(value) {\n        this.url = value;\n        return this;\n    }\n}\nconst makeRequest = async (params)=>{\n    const { query, variables, fetchOptions } = params;\n    const fetcher = createHttpMethodFetcher((0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.uppercase)(params.method ?? `post`));\n    const isBatchingQuery = Array.isArray(params.query);\n    const response = await fetcher(params);\n    const result = await getResult(response, fetchOptions.jsonSerializer ?? _defaultJsonSerializer_js__WEBPACK_IMPORTED_MODULE_0__.defaultJsonSerializer);\n    const successfullyReceivedData = Array.isArray(result) ? !result.some(({ data })=>!data) : Boolean(result.data);\n    const successfullyPassedErrorPolicy = Array.isArray(result) || !result.errors || Array.isArray(result.errors) && !result.errors.length || fetchOptions.errorPolicy === `all` || fetchOptions.errorPolicy === `ignore`;\n    if (response.ok && successfullyPassedErrorPolicy && successfullyReceivedData) {\n        // @ts-expect-error TODO fixme\n        const { errors: _, ...rest } = Array.isArray(result) ? result : result;\n        const data = fetchOptions.errorPolicy === `ignore` ? rest : result;\n        const dataEnvelope = isBatchingQuery ? {\n            data\n        } : data;\n        // @ts-expect-error TODO\n        return {\n            ...dataEnvelope,\n            headers: response.headers,\n            status: response.status\n        };\n    } else {\n        const errorResult = typeof result === `string` ? {\n            error: result\n        } : result;\n        throw new _types_js__WEBPACK_IMPORTED_MODULE_4__.ClientError(// @ts-expect-error TODO\n        {\n            ...errorResult,\n            status: response.status,\n            headers: response.headers\n        }, {\n            query,\n            variables\n        });\n    }\n};\n/**\n * Send a GraphQL Query to the GraphQL server for execution.\n */ const rawRequest = async (...args)=>{\n    const [urlOrOptions, query, ...variablesAndRequestHeaders] = args;\n    const requestOptions = (0,_parseArgs_js__WEBPACK_IMPORTED_MODULE_2__.parseRawRequestExtendedArgs)(urlOrOptions, query, ...variablesAndRequestHeaders);\n    const client = new GraphQLClient(requestOptions.url);\n    return client.rawRequest({\n        ...requestOptions\n    });\n};\n// prettier-ignore\n// eslint-disable-next-line\nasync function request(urlOrOptions, document, ...variablesAndRequestHeaders) {\n    const requestOptions = (0,_parseArgs_js__WEBPACK_IMPORTED_MODULE_2__.parseRequestExtendedArgs)(urlOrOptions, document, ...variablesAndRequestHeaders);\n    const client = new GraphQLClient(requestOptions.url);\n    return client.request({\n        ...requestOptions\n    });\n}\n/**\n * Send a batch of GraphQL Document to the GraphQL server for execution.\n *\n * @example\n *\n * ```ts\n * // You can pass a raw string\n *\n * await batchRequests('https://foo.bar/graphql', [\n * {\n *  query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * },\n * {\n *   query: `\n *   {\n *     query {\n *       users\n *     }\n *   }`\n * }])\n *\n * // You can also pass a GraphQL DocumentNode as query. Convenient if you\n * // are using graphql-tag package.\n *\n * import gql from 'graphql-tag'\n *\n * await batchRequests('https://foo.bar/graphql', [{ query: gql`...` }])\n * ```\n */ const batchRequests = async (...args)=>{\n    const params = parseBatchRequestsArgsExtended(args);\n    const client = new GraphQLClient(params.url);\n    return client.batchRequests(params);\n};\nconst parseBatchRequestsArgsExtended = (args)=>{\n    if (args.length === 1) {\n        return args[0];\n    } else {\n        return {\n            url: args[0],\n            documents: args[1],\n            requestHeaders: args[2],\n            signal: undefined\n        };\n    }\n};\nconst createRequestBody = (query, variables, operationName, jsonSerializer)=>{\n    const jsonSerializer_ = jsonSerializer ?? _defaultJsonSerializer_js__WEBPACK_IMPORTED_MODULE_0__.defaultJsonSerializer;\n    if (!Array.isArray(query)) {\n        return jsonSerializer_.stringify({\n            query,\n            variables,\n            operationName\n        });\n    }\n    if (typeof variables !== `undefined` && !Array.isArray(variables)) {\n        throw new Error(`Cannot create request body with given variable type, array expected`);\n    }\n    // Batch support\n    const payload = query.reduce((acc, currentQuery, index)=>{\n        acc.push({\n            query: currentQuery,\n            variables: variables ? variables[index] : undefined\n        });\n        return acc;\n    }, []);\n    return jsonSerializer_.stringify(payload);\n};\nconst getResult = async (response, jsonSerializer)=>{\n    let contentType;\n    response.headers.forEach((value, key)=>{\n        if (key.toLowerCase() === `content-type`) {\n            contentType = value;\n        }\n    });\n    if (contentType && (contentType.toLowerCase().startsWith(`application/json`) || contentType.toLowerCase().startsWith(`application/graphql+json`) || contentType.toLowerCase().startsWith(`application/graphql-response+json`))) {\n        return jsonSerializer.parse(await response.text());\n    } else {\n        return response.text();\n    }\n};\nconst callOrIdentity = (value)=>{\n    return typeof value === `function` ? value() : value;\n};\n/**\n * Convenience passthrough template tag to get the benefits of tooling for the gql template tag. This does not actually parse the input into a GraphQL DocumentNode like graphql-tag package does. It just returns the string with any variables given interpolated. Can save you a bit of performance and having to install another package.\n *\n * @example\n * ```\n * import { gql } from 'graphql-request'\n *\n * await request('https://foo.bar/graphql', gql`...`)\n * ```\n *\n * @remarks\n *\n * Several tools in the Node GraphQL ecosystem are hardcoded to specially treat any template tag named \"gql\". For example see this prettier issue: https://github.com/prettier/prettier/issues/4360. Using this template tag has no runtime effect beyond variable interpolation.\n */ const gql = (chunks, ...variables)=>{\n    return chunks.reduce((acc, chunk, index)=>`${acc}${chunk}${index in variables ? String(variables[index]) : ``}`, ``);\n};\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (request); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graphql-request/build/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graphql-request/build/esm/parseArgs.js":
/*!*************************************************************!*\
  !*** ./node_modules/graphql-request/build/esm/parseArgs.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseBatchRequestArgs: () => (/* binding */ parseBatchRequestArgs),\n/* harmony export */   parseRawRequestArgs: () => (/* binding */ parseRawRequestArgs),\n/* harmony export */   parseRawRequestExtendedArgs: () => (/* binding */ parseRawRequestExtendedArgs),\n/* harmony export */   parseRequestArgs: () => (/* binding */ parseRequestArgs),\n/* harmony export */   parseRequestExtendedArgs: () => (/* binding */ parseRequestExtendedArgs)\n/* harmony export */ });\nconst parseRequestArgs = (documentOrOptions, variables, requestHeaders)=>{\n    return documentOrOptions.document ? documentOrOptions : {\n        document: documentOrOptions,\n        variables: variables,\n        requestHeaders: requestHeaders,\n        signal: undefined\n    };\n};\nconst parseRawRequestArgs = (queryOrOptions, variables, requestHeaders)=>{\n    return queryOrOptions.query ? queryOrOptions : {\n        query: queryOrOptions,\n        variables: variables,\n        requestHeaders: requestHeaders,\n        signal: undefined\n    };\n};\nconst parseBatchRequestArgs = (documentsOrOptions, requestHeaders)=>{\n    return documentsOrOptions.documents ? documentsOrOptions : {\n        documents: documentsOrOptions,\n        requestHeaders: requestHeaders,\n        signal: undefined\n    };\n};\nconst parseRequestExtendedArgs = (urlOrOptions, document, ...variablesAndRequestHeaders)=>{\n    const [variables, requestHeaders] = variablesAndRequestHeaders;\n    return urlOrOptions.document ? urlOrOptions : {\n        url: urlOrOptions,\n        document: document,\n        variables,\n        requestHeaders,\n        signal: undefined\n    };\n};\nconst parseRawRequestExtendedArgs = (urlOrOptions, query, ...variablesAndRequestHeaders)=>{\n    const [variables, requestHeaders] = variablesAndRequestHeaders;\n    return urlOrOptions.query ? urlOrOptions : {\n        url: urlOrOptions,\n        query: query,\n        variables,\n        requestHeaders,\n        signal: undefined\n    };\n}; //# sourceMappingURL=parseArgs.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2VzbS9wYXJzZUFyZ3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBTyxNQUFNQSxtQkFBbUIsQ0FBQ0MsbUJBQW1CQyxXQUFXQztJQUMzRCxPQUFPRixrQkFBa0JHLFFBQVEsR0FDM0JILG9CQUNBO1FBQ0VHLFVBQVVIO1FBQ1ZDLFdBQVdBO1FBQ1hDLGdCQUFnQkE7UUFDaEJFLFFBQVFDO0lBQ1o7QUFDUixFQUFFO0FBQ0ssTUFBTUMsc0JBQXNCLENBQUNDLGdCQUFnQk4sV0FBV0M7SUFDM0QsT0FBT0ssZUFBZUMsS0FBSyxHQUNyQkQsaUJBQ0E7UUFDRUMsT0FBT0Q7UUFDUE4sV0FBV0E7UUFDWEMsZ0JBQWdCQTtRQUNoQkUsUUFBUUM7SUFDWjtBQUNSLEVBQUU7QUFDSyxNQUFNSSx3QkFBd0IsQ0FBQ0Msb0JBQW9CUjtJQUN0RCxPQUFPUSxtQkFBbUJDLFNBQVMsR0FDN0JELHFCQUNBO1FBQ0VDLFdBQVdEO1FBQ1hSLGdCQUFnQkE7UUFDaEJFLFFBQVFDO0lBQ1o7QUFDUixFQUFFO0FBQ0ssTUFBTU8sMkJBQTJCLENBQUNDLGNBQWNWLFVBQVUsR0FBR1c7SUFDaEUsTUFBTSxDQUFDYixXQUFXQyxlQUFlLEdBQUdZO0lBQ3BDLE9BQU9ELGFBQWFWLFFBQVEsR0FDdEJVLGVBQ0E7UUFDRUUsS0FBS0Y7UUFDTFYsVUFBVUE7UUFDVkY7UUFDQUM7UUFDQUUsUUFBUUM7SUFDWjtBQUNSLEVBQUU7QUFDSyxNQUFNVyw4QkFBOEIsQ0FBQ0gsY0FBY0wsT0FBTyxHQUFHTTtJQUNoRSxNQUFNLENBQUNiLFdBQVdDLGVBQWUsR0FBR1k7SUFDcEMsT0FBT0QsYUFBYUwsS0FBSyxHQUNuQkssZUFDQTtRQUNFRSxLQUFLRjtRQUNMTCxPQUFPQTtRQUNQUDtRQUNBQztRQUNBRSxRQUFRQztJQUNaO0FBQ1IsRUFBRSxDQUNGLHFDQUFxQyIsInNvdXJjZXMiOlsid2VicGFjazovL3VpLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwtcmVxdWVzdC9idWlsZC9lc20vcGFyc2VBcmdzLmpzP2E2ZmMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNvbnN0IHBhcnNlUmVxdWVzdEFyZ3MgPSAoZG9jdW1lbnRPck9wdGlvbnMsIHZhcmlhYmxlcywgcmVxdWVzdEhlYWRlcnMpID0+IHtcbiAgICByZXR1cm4gZG9jdW1lbnRPck9wdGlvbnMuZG9jdW1lbnRcbiAgICAgICAgPyBkb2N1bWVudE9yT3B0aW9uc1xuICAgICAgICA6IHtcbiAgICAgICAgICAgIGRvY3VtZW50OiBkb2N1bWVudE9yT3B0aW9ucyxcbiAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnM6IHJlcXVlc3RIZWFkZXJzLFxuICAgICAgICAgICAgc2lnbmFsOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IHBhcnNlUmF3UmVxdWVzdEFyZ3MgPSAocXVlcnlPck9wdGlvbnMsIHZhcmlhYmxlcywgcmVxdWVzdEhlYWRlcnMpID0+IHtcbiAgICByZXR1cm4gcXVlcnlPck9wdGlvbnMucXVlcnlcbiAgICAgICAgPyBxdWVyeU9yT3B0aW9uc1xuICAgICAgICA6IHtcbiAgICAgICAgICAgIHF1ZXJ5OiBxdWVyeU9yT3B0aW9ucyxcbiAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgcmVxdWVzdEhlYWRlcnM6IHJlcXVlc3RIZWFkZXJzLFxuICAgICAgICAgICAgc2lnbmFsOiB1bmRlZmluZWQsXG4gICAgICAgIH07XG59O1xuZXhwb3J0IGNvbnN0IHBhcnNlQmF0Y2hSZXF1ZXN0QXJncyA9IChkb2N1bWVudHNPck9wdGlvbnMsIHJlcXVlc3RIZWFkZXJzKSA9PiB7XG4gICAgcmV0dXJuIGRvY3VtZW50c09yT3B0aW9ucy5kb2N1bWVudHNcbiAgICAgICAgPyBkb2N1bWVudHNPck9wdGlvbnNcbiAgICAgICAgOiB7XG4gICAgICAgICAgICBkb2N1bWVudHM6IGRvY3VtZW50c09yT3B0aW9ucyxcbiAgICAgICAgICAgIHJlcXVlc3RIZWFkZXJzOiByZXF1ZXN0SGVhZGVycyxcbiAgICAgICAgICAgIHNpZ25hbDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xufTtcbmV4cG9ydCBjb25zdCBwYXJzZVJlcXVlc3RFeHRlbmRlZEFyZ3MgPSAodXJsT3JPcHRpb25zLCBkb2N1bWVudCwgLi4udmFyaWFibGVzQW5kUmVxdWVzdEhlYWRlcnMpID0+IHtcbiAgICBjb25zdCBbdmFyaWFibGVzLCByZXF1ZXN0SGVhZGVyc10gPSB2YXJpYWJsZXNBbmRSZXF1ZXN0SGVhZGVycztcbiAgICByZXR1cm4gdXJsT3JPcHRpb25zLmRvY3VtZW50XG4gICAgICAgID8gdXJsT3JPcHRpb25zXG4gICAgICAgIDoge1xuICAgICAgICAgICAgdXJsOiB1cmxPck9wdGlvbnMsXG4gICAgICAgICAgICBkb2N1bWVudDogZG9jdW1lbnQsXG4gICAgICAgICAgICB2YXJpYWJsZXMsXG4gICAgICAgICAgICByZXF1ZXN0SGVhZGVycyxcbiAgICAgICAgICAgIHNpZ25hbDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xufTtcbmV4cG9ydCBjb25zdCBwYXJzZVJhd1JlcXVlc3RFeHRlbmRlZEFyZ3MgPSAodXJsT3JPcHRpb25zLCBxdWVyeSwgLi4udmFyaWFibGVzQW5kUmVxdWVzdEhlYWRlcnMpID0+IHtcbiAgICBjb25zdCBbdmFyaWFibGVzLCByZXF1ZXN0SGVhZGVyc10gPSB2YXJpYWJsZXNBbmRSZXF1ZXN0SGVhZGVycztcbiAgICByZXR1cm4gdXJsT3JPcHRpb25zLnF1ZXJ5XG4gICAgICAgID8gdXJsT3JPcHRpb25zXG4gICAgICAgIDoge1xuICAgICAgICAgICAgdXJsOiB1cmxPck9wdGlvbnMsXG4gICAgICAgICAgICBxdWVyeTogcXVlcnksXG4gICAgICAgICAgICB2YXJpYWJsZXMsXG4gICAgICAgICAgICByZXF1ZXN0SGVhZGVycyxcbiAgICAgICAgICAgIHNpZ25hbDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhcnNlQXJncy5qcy5tYXAiXSwibmFtZXMiOlsicGFyc2VSZXF1ZXN0QXJncyIsImRvY3VtZW50T3JPcHRpb25zIiwidmFyaWFibGVzIiwicmVxdWVzdEhlYWRlcnMiLCJkb2N1bWVudCIsInNpZ25hbCIsInVuZGVmaW5lZCIsInBhcnNlUmF3UmVxdWVzdEFyZ3MiLCJxdWVyeU9yT3B0aW9ucyIsInF1ZXJ5IiwicGFyc2VCYXRjaFJlcXVlc3RBcmdzIiwiZG9jdW1lbnRzT3JPcHRpb25zIiwiZG9jdW1lbnRzIiwicGFyc2VSZXF1ZXN0RXh0ZW5kZWRBcmdzIiwidXJsT3JPcHRpb25zIiwidmFyaWFibGVzQW5kUmVxdWVzdEhlYWRlcnMiLCJ1cmwiLCJwYXJzZVJhd1JlcXVlc3RFeHRlbmRlZEFyZ3MiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graphql-request/build/esm/parseArgs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graphql-request/build/esm/resolveRequestDocument.js":
/*!**************************************************************************!*\
  !*** ./node_modules/graphql-request/build/esm/resolveRequestDocument.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveRequestDocument: () => (/* binding */ resolveRequestDocument)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/parser.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/printer.mjs\");\n\n/**\n * helpers\n */ const extractOperationName = (document)=>{\n    let operationName = undefined;\n    const operationDefinitions = document.definitions.filter((definition)=>definition.kind === `OperationDefinition`);\n    if (operationDefinitions.length === 1) {\n        operationName = operationDefinitions[0]?.name?.value;\n    }\n    return operationName;\n};\nconst resolveRequestDocument = (document)=>{\n    if (typeof document === `string`) {\n        let operationName = undefined;\n        try {\n            const parsedDocument = (0,graphql__WEBPACK_IMPORTED_MODULE_0__.parse)(document);\n            operationName = extractOperationName(parsedDocument);\n        } catch (err) {\n        // Failed parsing the document, the operationName will be undefined\n        }\n        return {\n            query: document,\n            operationName\n        };\n    }\n    const operationName = extractOperationName(document);\n    return {\n        query: (0,graphql__WEBPACK_IMPORTED_MODULE_1__.print)(document),\n        operationName\n    };\n}; //# sourceMappingURL=resolveRequestDocument.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2VzbS9yZXNvbHZlUmVxdWVzdERvY3VtZW50LmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUF1QztBQUN2Qzs7Q0FFQyxHQUNELE1BQU1FLHVCQUF1QixDQUFDQztJQUMxQixJQUFJQyxnQkFBZ0JDO0lBQ3BCLE1BQU1DLHVCQUF1QkgsU0FBU0ksV0FBVyxDQUFDQyxNQUFNLENBQUMsQ0FBQ0MsYUFBZUEsV0FBV0MsSUFBSSxLQUFLLENBQUMsbUJBQW1CLENBQUM7SUFDbEgsSUFBSUoscUJBQXFCSyxNQUFNLEtBQUssR0FBRztRQUNuQ1AsZ0JBQWdCRSxvQkFBb0IsQ0FBQyxFQUFFLEVBQUVNLE1BQU1DO0lBQ25EO0lBQ0EsT0FBT1Q7QUFDWDtBQUNPLE1BQU1VLHlCQUF5QixDQUFDWDtJQUNuQyxJQUFJLE9BQU9BLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUM5QixJQUFJQyxnQkFBZ0JDO1FBQ3BCLElBQUk7WUFDQSxNQUFNVSxpQkFBaUJmLDhDQUFLQSxDQUFDRztZQUM3QkMsZ0JBQWdCRixxQkFBcUJhO1FBQ3pDLEVBQ0EsT0FBT0MsS0FBSztRQUNSLG1FQUFtRTtRQUN2RTtRQUNBLE9BQU87WUFBRUMsT0FBT2Q7WUFBVUM7UUFBYztJQUM1QztJQUNBLE1BQU1BLGdCQUFnQkYscUJBQXFCQztJQUMzQyxPQUFPO1FBQUVjLE9BQU9oQiw4Q0FBS0EsQ0FBQ0U7UUFBV0M7SUFBYztBQUNuRCxFQUFFLENBQ0Ysa0RBQWtEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWkvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2VzbS9yZXNvbHZlUmVxdWVzdERvY3VtZW50LmpzP2NiY2EiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2UsIHByaW50IH0gZnJvbSAnZ3JhcGhxbCc7XG4vKipcbiAqIGhlbHBlcnNcbiAqL1xuY29uc3QgZXh0cmFjdE9wZXJhdGlvbk5hbWUgPSAoZG9jdW1lbnQpID0+IHtcbiAgICBsZXQgb3BlcmF0aW9uTmFtZSA9IHVuZGVmaW5lZDtcbiAgICBjb25zdCBvcGVyYXRpb25EZWZpbml0aW9ucyA9IGRvY3VtZW50LmRlZmluaXRpb25zLmZpbHRlcigoZGVmaW5pdGlvbikgPT4gZGVmaW5pdGlvbi5raW5kID09PSBgT3BlcmF0aW9uRGVmaW5pdGlvbmApO1xuICAgIGlmIChvcGVyYXRpb25EZWZpbml0aW9ucy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgb3BlcmF0aW9uTmFtZSA9IG9wZXJhdGlvbkRlZmluaXRpb25zWzBdPy5uYW1lPy52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG9wZXJhdGlvbk5hbWU7XG59O1xuZXhwb3J0IGNvbnN0IHJlc29sdmVSZXF1ZXN0RG9jdW1lbnQgPSAoZG9jdW1lbnQpID0+IHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBgc3RyaW5nYCkge1xuICAgICAgICBsZXQgb3BlcmF0aW9uTmFtZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZERvY3VtZW50ID0gcGFyc2UoZG9jdW1lbnQpO1xuICAgICAgICAgICAgb3BlcmF0aW9uTmFtZSA9IGV4dHJhY3RPcGVyYXRpb25OYW1lKHBhcnNlZERvY3VtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAvLyBGYWlsZWQgcGFyc2luZyB0aGUgZG9jdW1lbnQsIHRoZSBvcGVyYXRpb25OYW1lIHdpbGwgYmUgdW5kZWZpbmVkXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgcXVlcnk6IGRvY3VtZW50LCBvcGVyYXRpb25OYW1lIH07XG4gICAgfVxuICAgIGNvbnN0IG9wZXJhdGlvbk5hbWUgPSBleHRyYWN0T3BlcmF0aW9uTmFtZShkb2N1bWVudCk7XG4gICAgcmV0dXJuIHsgcXVlcnk6IHByaW50KGRvY3VtZW50KSwgb3BlcmF0aW9uTmFtZSB9O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc29sdmVSZXF1ZXN0RG9jdW1lbnQuanMubWFwIl0sIm5hbWVzIjpbInBhcnNlIiwicHJpbnQiLCJleHRyYWN0T3BlcmF0aW9uTmFtZSIsImRvY3VtZW50Iiwib3BlcmF0aW9uTmFtZSIsInVuZGVmaW5lZCIsIm9wZXJhdGlvbkRlZmluaXRpb25zIiwiZGVmaW5pdGlvbnMiLCJmaWx0ZXIiLCJkZWZpbml0aW9uIiwia2luZCIsImxlbmd0aCIsIm5hbWUiLCJ2YWx1ZSIsInJlc29sdmVSZXF1ZXN0RG9jdW1lbnQiLCJwYXJzZWREb2N1bWVudCIsImVyciIsInF1ZXJ5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graphql-request/build/esm/resolveRequestDocument.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/graphql-request/build/esm/types.js":
/*!*********************************************************!*\
  !*** ./node_modules/graphql-request/build/esm/types.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ClientError: () => (/* binding */ ClientError)\n/* harmony export */ });\nclass ClientError extends Error {\n    constructor(response, request){\n        const message = `${ClientError.extractMessage(response)}: ${JSON.stringify({\n            response,\n            request\n        })}`;\n        super(message);\n        Object.setPrototypeOf(this, ClientError.prototype);\n        this.response = response;\n        this.request = request;\n        // this is needed as Safari doesn't support .captureStackTrace\n        if (typeof Error.captureStackTrace === `function`) {\n            Error.captureStackTrace(this, ClientError);\n        }\n    }\n    static extractMessage(response) {\n        return response.errors?.[0]?.message ?? `GraphQL Error (Code: ${response.status})`;\n    }\n} //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2VzbS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsb0JBQW9CQztJQUM3QkMsWUFBWUMsUUFBUSxFQUFFQyxPQUFPLENBQUU7UUFDM0IsTUFBTUMsVUFBVSxDQUFDLEVBQUVMLFlBQVlNLGNBQWMsQ0FBQ0gsVUFBVSxFQUFFLEVBQUVJLEtBQUtDLFNBQVMsQ0FBQztZQUN2RUw7WUFDQUM7UUFDSixHQUFHLENBQUM7UUFDSixLQUFLLENBQUNDO1FBQ05JLE9BQU9DLGNBQWMsQ0FBQyxJQUFJLEVBQUVWLFlBQVlXLFNBQVM7UUFDakQsSUFBSSxDQUFDUixRQUFRLEdBQUdBO1FBQ2hCLElBQUksQ0FBQ0MsT0FBTyxHQUFHQTtRQUNmLDhEQUE4RDtRQUM5RCxJQUFJLE9BQU9ILE1BQU1XLGlCQUFpQixLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDL0NYLE1BQU1XLGlCQUFpQixDQUFDLElBQUksRUFBRVo7UUFDbEM7SUFDSjtJQUNBLE9BQU9NLGVBQWVILFFBQVEsRUFBRTtRQUM1QixPQUFPQSxTQUFTVSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUVSLFdBQVcsQ0FBQyxxQkFBcUIsRUFBRUYsU0FBU1csTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN0RjtBQUNKLEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdWkvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC1yZXF1ZXN0L2J1aWxkL2VzbS90eXBlcy5qcz83Y2RkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBDbGllbnRFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZSwgcmVxdWVzdCkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYCR7Q2xpZW50RXJyb3IuZXh0cmFjdE1lc3NhZ2UocmVzcG9uc2UpfTogJHtKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICByZXNwb25zZSxcbiAgICAgICAgICAgIHJlcXVlc3QsXG4gICAgICAgIH0pfWA7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YodGhpcywgQ2xpZW50RXJyb3IucHJvdG90eXBlKTtcbiAgICAgICAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICAgICAgICB0aGlzLnJlcXVlc3QgPSByZXF1ZXN0O1xuICAgICAgICAvLyB0aGlzIGlzIG5lZWRlZCBhcyBTYWZhcmkgZG9lc24ndCBzdXBwb3J0IC5jYXB0dXJlU3RhY2tUcmFjZVxuICAgICAgICBpZiAodHlwZW9mIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlID09PSBgZnVuY3Rpb25gKSB7XG4gICAgICAgICAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBDbGllbnRFcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGV4dHJhY3RNZXNzYWdlKHJlc3BvbnNlKSB7XG4gICAgICAgIHJldHVybiByZXNwb25zZS5lcnJvcnM/LlswXT8ubWVzc2FnZSA/PyBgR3JhcGhRTCBFcnJvciAoQ29kZTogJHtyZXNwb25zZS5zdGF0dXN9KWA7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbIkNsaWVudEVycm9yIiwiRXJyb3IiLCJjb25zdHJ1Y3RvciIsInJlc3BvbnNlIiwicmVxdWVzdCIsIm1lc3NhZ2UiLCJleHRyYWN0TWVzc2FnZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsImNhcHR1cmVTdGFja1RyYWNlIiwiZXJyb3JzIiwic3RhdHVzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/graphql-request/build/esm/types.js\n");

/***/ })

};
;